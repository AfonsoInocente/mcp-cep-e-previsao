/**
 * Intelligent Decisor Tool
 *
 * Analyzes user input and decides whether to consult only ZIP code or perform complete flow with weather forecast
 */

import { createTool } from "@deco/workers-runtime/mastra";
import { z } from "zod";
import type { Env } from "../main.ts";
import { manualAnalysisFallback } from "./fallback-analysis.ts";

export const createIntelligentDecisorTool = (env: Env) =>
  createTool({
    id: "DECISOR_INTELIGENTE",
    description:
      "Analisa a entrada do usu√°rio e decide se deve consultar apenas CEP ou fazer o fluxo completo com previs√£o do tempo",
    inputSchema: z.object({
      entrada_usuario: z.string().min(1, "Entrada do usu√°rio √© obrigat√≥ria"),
    }),
    outputSchema: z.object({
      acao: z.enum([
        "CONSULTAR_CEP",
        "CONSULTAR_CEP_E_PREVISAO",
        "CONSULTAR_PREVISAO_DIRETA",
        "CONSULTA_FORA_ESCOPO",
        "SOLICITAR_CEP",
        "SOLICITAR_LOCAL",
        "MULTIPLAS_CIDADES",
        "CIDADE_NAO_ENCONTRADA",
      ]),
      cep_extraido: z.string().optional(),
      cidade_extraida: z.string().optional(),
      justificativa: z.string(),
      mensagem_amigavel: z.string(),
      cidades_encontradas: z.array(z.any()).optional(),
    }),
    execute: async ({ context }) => {
      const { entrada_usuario } = context;

      console.log(
        `DECISOR_INTELIGENTE: Analisando entrada: "${entrada_usuario}"`
      );

      // Schema para a decis√£o da IA
      const DECISION_SCHEMA = {
        type: "object",
        properties: {
          acao: {
            type: "string",
            enum: [
              "CONSULTAR_CEP",
              "CONSULTAR_CEP_E_PREVISAO",
              "CONSULTAR_PREVISAO_DIRETA",
            ],
            description:
              "A√ß√£o a ser executada: CONSULTAR_CEP para apenas consultar CEP, CONSULTAR_CEP_E_PREVISAO para consultar CEP e previs√£o do tempo, CONSULTAR_PREVISAO_DIRETA para consultar previs√£o diretamente por cidade",
          },
          cep_extraido: {
            type: "string",
            description:
              "CEP extra√≠do da entrada do usu√°rio (formato: 00000000, sem h√≠fen)",
          },
          cidade_extraida: {
            type: "string",
            description:
              "Cidade extra√≠da da entrada do usu√°rio (se mencionada, sem acentos desnecess√°rios)",
          },
          justificativa: {
            type: "string",
            description: "Justificativa t√©cnica para a decis√£o tomada",
          },
          mensagem_amigavel: {
            type: "string",
            description:
              "Mensagem amig√°vel para o usu√°rio explicando o que ser√° feito",
          },
          precisa_cep: {
            type: "boolean",
            description:
              "Se a consulta precisa de um CEP v√°lido para funcionar",
          },
          pode_fallback: {
            type: "boolean",
            description:
              "Se pode usar fallback quando CEP/cidade n√£o for encontrado",
          },
        },
        required: [
          "acao",
          "justificativa",
          "mensagem_amigavel",
          "precisa_cep",
          "pode_fallback",
        ],
      };

      try {
        let prompt =
          "Analise a seguinte entrada do usu√°rio e decida qual a√ß√£o tomar:\n\n";
        prompt += `ENTRADA DO USU√ÅRIO: "${entrada_usuario}"\n\n`;
        prompt += "POSS√çVEIS A√á√ïES:\n";
        prompt +=
          "1. CONSULTAR_CEP: Quando o usu√°rio quer apenas informa√ß√µes de endere√ßo (CEP, rua, bairro, cidade, estado)\n";
        prompt +=
          "2. CONSULTAR_CEP_E_PREVISAO: Quando o usu√°rio quer informa√ß√µes de endere√ßo E previs√£o do tempo\n\n";
        prompt += "CRIT√âRIOS PARA DECIS√ÉO:\n";
        prompt +=
          "- Se a entrada cont√©m apenas CEP ou endere√ßo ‚Üí CONSULTAR_CEP\n";
        prompt +=
          '- Se a entrada menciona "clima", "tempo", "previs√£o", "temperatura", "chuva", "sol" E tem CEP ‚Üí CONSULTAR_CEP_E_PREVISAO\n';
        prompt +=
          "- Se a entrada pergunta sobre condi√ß√µes meteorol√≥gicas E tem CEP ‚Üí CONSULTAR_CEP_E_PREVISAO\n";
        prompt +=
          "- Se a entrada √© sobre localiza√ß√£o/endere√ßo apenas ‚Üí CONSULTAR_CEP\n";
        prompt +=
          "- Se a entrada tem CEP E qualquer men√ß√£o a clima/tempo ‚Üí CONSULTAR_CEP_E_PREVISAO\n\n";
        prompt += "EXEMPLOS:\n";
        prompt += '- "CEP 01310-100" ‚Üí CONSULTAR_CEP\n';
        prompt +=
          '- "Quero saber o endere√ßo do CEP 01310-100" ‚Üí CONSULTAR_CEP\n';
        prompt +=
          '- "Como est√° o clima no CEP 01310-100?" ‚Üí CONSULTAR_CEP_E_PREVISAO\n';
        prompt +=
          '- "Previs√£o do tempo para 01310-100" ‚Üí CONSULTAR_CEP_E_PREVISAO\n';
        prompt +=
          '- "CEP 01310-100 com previs√£o do tempo" ‚Üí CONSULTAR_CEP_E_PREVISAO\n';
        prompt +=
          '- "Quero o endere√ßo e clima do CEP 20040-007" ‚Üí CONSULTAR_CEP_E_PREVISAO\n';
        prompt +=
          '- "Como est√° o clima em S√£o Paulo?" ‚Üí CONSULTAR_PREVISAO_DIRETA\n';
        prompt += '- "Temperatura em S√£o Paulo" ‚Üí CONSULTAR_PREVISAO_DIRETA\n';
        prompt +=
          '- "Previs√£o do tempo para S√£o Paulo" ‚Üí CONSULTAR_PREVISAO_DIRETA\n';
        prompt +=
          '- "Qual √© a melhor marca de carro?" ‚Üí CONSULTA_FORA_ESCOPO\n';
        prompt += '- "Como fazer bolo?" ‚Üí CONSULTA_FORA_ESCOPO\n';
        prompt += '- "Hist√≥ria do Brasil" ‚Üí CONSULTA_FORA_ESCOPO\n';
        prompt += '- "Quero saber o endere√ßo" ‚Üí SOLICITAR_CEP\n';
        prompt += '- "Previs√£o do tempo" ‚Üí SOLICITAR_LOCAL\n';
        prompt += '- "S√£o Paulo" ‚Üí CONSULTAR_PREVISAO_DIRETA\n';
        prompt += '- "Rio de Janeiro" ‚Üí CONSULTAR_PREVISAO_DIRETA\n';
        prompt += '- "Belo Horizonte" ‚Üí CONSULTAR_PREVISAO_DIRETA\n\n';
        prompt += "TAREFAS:\n";
        prompt +=
          "1. Identifique se h√° um CEP na entrada (formato: 00000-000 ou 00000000)\n";
        prompt += "2. Identifique se h√° men√ß√£o a cidade/localidade\n";
        prompt +=
          "3. Determine a inten√ß√£o do usu√°rio (endere√ßo apenas ou endere√ßo + clima)\n";
        prompt += "4. Extraia o CEP se presente\n";
        prompt += "5. Extraia a cidade se mencionada\n";
        prompt += "6. Forne√ßa uma justificativa clara\n";
        prompt +=
          "7. Crie uma mensagem amig√°vel explicando o que ser√° feito\n\n";
        prompt += "Seja preciso e amig√°vel na an√°lise.";

        console.log("DECISOR_INTELIGENTE: Enviando para an√°lise da IA");

        const aiResponse = await env.DECO_CHAT_WORKSPACE_API.AI_GENERATE_OBJECT(
          {
            model: "openai:gpt-4o-mini",
            messages: [
              {
                role: "system",
                content:
                  "Voc√™ √© um assistente especializado em an√°lise de inten√ß√µes do usu√°rio para consultas de CEP e previs√£o do tempo. Seja preciso e amig√°vel.",
              },
              {
                role: "user",
                content: prompt,
              },
            ],
            temperature: 0.3,
            schema: DECISION_SCHEMA,
          }
        );

        console.log(
          "DECISOR_INTELIGENTE: Decis√£o recebida:",
          aiResponse.object
        );

        if (!aiResponse.object) {
          throw new Error("Falha ao analisar entrada do usu√°rio");
        }

        return aiResponse.object as {
          acao: "CONSULTAR_CEP" | "CONSULTAR_CEP_E_PREVISAO";
          cep_extraido?: string;
          cidade_extraida?: string;
          justificativa: string;
          mensagem_amigavel: string;
        };
      } catch (error) {
        console.log("DECISOR_INTELIGENTE: Erro na an√°lise:", error);

        // Fallback inteligente usando IA para an√°lise da entrada
        console.log("ü§ñ Usando IA para an√°lise inteligente da entrada...");

        const ANALISE_ENTRADA_SCHEMA = {
          type: "object",
          properties: {
            tipo_consulta: {
              type: "string",
              enum: ["CEP", "PREVISAO", "CEP_E_PREVISAO", "FORA_ESCOPO"],
              description: "Tipo de consulta identificada",
            },
            cep_identificado: {
              type: "string",
              description: "CEP extra√≠do da entrada (se houver)",
            },
            cidade_identificada: {
              type: "string",
              description: "Cidade extra√≠da da entrada (se houver)",
            },
            acao_recomendada: {
              type: "string",
              enum: [
                "CONSULTAR_CEP",
                "CONSULTAR_PREVISAO_DIRETA",
                "CONSULTAR_CEP_E_PREVISAO",
                "SOLICITAR_CEP",
                "SOLICITAR_LOCAL",
                "CONSULTA_FORA_ESCOPO",
              ],
              description: "A√ß√£o recomendada baseada na an√°lise",
            },
            justificativa: {
              type: "string",
              description: "Justificativa da an√°lise",
            },
            mensagem_amigavel: {
              type: "string",
              description: "Mensagem amig√°vel para o usu√°rio",
            },
          },
          required: [
            "tipo_consulta",
            "acao_recomendada",
            "justificativa",
            "mensagem_amigavel",
          ],
        };

        const promptAnalise = `Analise a seguinte entrada do usu√°rio e identifique:

ENTRADA: "${entrada_usuario}"

TAREFAS:
1. Identifique se h√° um CEP (formato: 00000-000 ou 00000000)
2. Identifique se h√° men√ß√£o a uma cidade/localidade
3. Determine se √© consulta de:
   - Apenas CEP (endere√ßo)
   - Apenas previs√£o do tempo
   - CEP + previs√£o do tempo
   - Fora do escopo (n√£o relacionado a CEP ou clima)

EXEMPLOS:
- "01310-100" ‚Üí CONSULTAR_CEP
- "S√£o Paulo" ‚Üí CONSULTAR_PREVISAO_DIRETA
- "Rio de Janeiro" ‚Üí CONSULTAR_PREVISAO_DIRETA
- "Como est√° o clima em S√£o Paulo?" ‚Üí CONSULTAR_PREVISAO_DIRETA
- "CEP 01310-100" ‚Üí CONSULTAR_CEP
- "Previs√£o do tempo para 01310-100" ‚Üí CONSULTAR_CEP_E_PREVISAO
- "Quero saber o endere√ßo" ‚Üí SOLICITAR_CEP
- "Previs√£o do tempo" ‚Üí SOLICITAR_LOCAL
- "Qual a melhor marca de carro?" ‚Üí CONSULTA_FORA_ESCOPO

Seja preciso e amig√°vel na an√°lise.`;

        try {
          console.log("ü§ñ DECISOR_INTELIGENTE: Chamando IA para an√°lise...");
          const analiseIA =
            await env.DECO_CHAT_WORKSPACE_API.AI_GENERATE_OBJECT({
              model: "openai:gpt-4o-mini",
              messages: [
                {
                  role: "system",
                  content:
                    "Voc√™ √© um assistente especializado em an√°lise de consultas de CEP e previs√£o do tempo. Seja preciso e amig√°vel.",
                },
                {
                  role: "user",
                  content: promptAnalise,
                },
              ],
              temperature: 0.1,
              schema: ANALISE_ENTRADA_SCHEMA,
            });

          if (analiseIA.object) {
            console.log("‚úÖ An√°lise IA recebida:", analiseIA.object);

            // Verificar se a IA extraiu dados que fazem sentido
            const cidadeIA = analiseIA.object.cidade_identificada;
            const cepIA = analiseIA.object.cep_identificado;

            // Se a IA extraiu uma cidade que cont√©m palavras-chave (como "previs√£o"), usar fallback
            console.log(
              "üîç DECISOR_INTELIGENTE: Validando cidade extra√≠da pela IA:",
              cidadeIA
            );
            if (
              cidadeIA &&
              typeof cidadeIA === "string" &&
              (cidadeIA.toLowerCase().includes("previs√£o") ||
                cidadeIA.toLowerCase().includes("previsao") ||
                cidadeIA.toLowerCase().includes("clima") ||
                cidadeIA.toLowerCase().includes("tempo") ||
                cidadeIA.toLowerCase().includes("em") ||
                cidadeIA.toLowerCase().includes("para") ||
                cidadeIA.toLowerCase().includes("de"))
            ) {
              console.log(
                "‚ö†Ô∏è IA extraiu cidade inv√°lida:",
                cidadeIA,
                "- usando fallback manual"
              );
              return await manualAnalysisFallback(entrada_usuario, env);
            } else {
              console.log("‚úÖ IA extraiu cidade v√°lida:", cidadeIA);
            }

            return {
              acao: analiseIA.object.acao_recomendada as any,
              cep_extraido: cepIA as string | undefined,
              cidade_extraida: cidadeIA as string | undefined,
              justificativa: analiseIA.object.justificativa as string,
              mensagem_amigavel: analiseIA.object.mensagem_amigavel as string,
              cidades_encontradas: undefined,
            };
          } else {
            console.log(
              "‚ö†Ô∏è An√°lise IA n√£o retornou objeto v√°lido, usando fallback manual"
            );
            return await manualAnalysisFallback(entrada_usuario, env);
          }
        } catch (error) {
          console.log("‚ö†Ô∏è Erro na an√°lise IA, usando fallback manual:", error);

          // Fallback inteligente manual
          return await manualAnalysisFallback(entrada_usuario, env);
        }
      }
    },
  });
