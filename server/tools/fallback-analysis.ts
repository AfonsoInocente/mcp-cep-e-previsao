/**
 * Manual Analysis Fallback
 *
 * Intelligent manual fallback function for analyzing user input when AI fails
 */

import type { Env } from "../main.ts";

export const manualAnalysisFallback = async (
  entrada_usuario: string,
  env: Env
) => {
  console.log("ğŸ”§ FALLBACK: Iniciando anÃ¡lise manual para:", entrada_usuario);

  // 1. Verificar se Ã© um CEP direto
  const cepMatch = entrada_usuario.match(/\d{5}-?\d{3}/);
  if (cepMatch) {
    console.log("ğŸ”§ FALLBACK: CEP identificado:", cepMatch[0]);

    // Verificar se hÃ¡ menÃ§Ã£o a clima/tempo/previsÃ£o
    const temClima =
      /clima|tempo|previsÃ£o|previsao|temperatura|chuva|sol/i.test(
        entrada_usuario
      );

    if (temClima) {
      console.log("ğŸ”§ FALLBACK: CEP + clima detectado");
      return {
        acao: "CONSULTAR_CEP_E_PREVISAO" as const,
        cep_extraido: cepMatch[0].replace(/\D/g, ""),
        cidade_extraida: undefined,
        justificativa: "CEP identificado com menÃ§Ã£o a clima/tempo",
        mensagem_amigavel: `Vou buscar o endereÃ§o e a previsÃ£o do tempo para o CEP ${cepMatch[0]}! ğŸ˜Š`,
      };
    } else {
      return {
        acao: "CONSULTAR_CEP" as const,
        cep_extraido: cepMatch[0].replace(/\D/g, ""),
        cidade_extraida: undefined,
        justificativa: "CEP identificado na entrada",
        mensagem_amigavel:
          "Vou buscar as informaÃ§Ãµes do endereÃ§o para vocÃª! ğŸ˜Š",
        cidades_encontradas: undefined,
      };
    }
  }

  // 2. Verificar palavras-chave de clima/tempo
  const palavrasClima =
    /tempo|clima|temperatura|chuva|sol|calor|frio|weather|previsÃ£o|previsao/i;
  const temPalavrasClima = palavrasClima.test(entrada_usuario);

  // 3. Verificar palavras-chave de CEP/endereÃ§o
  const palavrasCEP =
    /cep|endereÃ§o|endereco|rua|bairro|cidade|city|loc|local|localidade/i;
  const temPalavrasCEP = palavrasCEP.test(entrada_usuario);

  // 4. Verificar se parece ser apenas o nome de uma cidade OU extrair cidade de frases
  const apenasCidade = entrada_usuario.match(/^([A-Za-zÃ€-Ã¿\s]+?)$/);
  const pareceCidade =
    apenasCidade &&
    apenasCidade[1].trim().split(/\s+/).length <= 3 &&
    /^[A-Za-zÃ€-Ã¿\s]+$/.test(apenasCidade[1].trim()) &&
    apenasCidade[1].trim().length > 2;

  // 5. Tentar extrair cidade de frases como "previsÃ£o para [cidade]"
  let cidadeExtraida = undefined;
  if (temPalavrasClima || temPalavrasCEP) {
    console.log(
      "ğŸ”§ FALLBACK: Tentando extrair cidade de frase:",
      entrada_usuario
    );

    // PadrÃµes para extrair cidade de frases
    const padroesCidade = [
      // PadrÃµes com palavras intermediÃ¡rias (para, em, de)
      /(?:previsÃ£o|previsao|clima|tempo|temperatura|cep|endereÃ§o|endereco|rua|bairro|cidade|city|loc|local|localidade)\s+(?:para|em|de)\s+([A-Za-zÃ€-Ã¿\s]+?)(?:\?|$|,|\.)/i,

      // PadrÃµes diretos (sem palavras intermediÃ¡rias)
      /(?:previsÃ£o|previsao|clima|tempo|temperatura|cep|endereÃ§o|endereco|rua|bairro|cidade|city|loc|local|localidade)\s+([A-Za-zÃ€-Ã¿\s]+?)(?:\?|$|,|\.)/i,

      // PadrÃµes especÃ­ficos para consultas de clima
      /(?:como\s+estÃ¡\s+o?\s*clima\s+em)\s+([A-Za-zÃ€-Ã¿\s]+?)(?:\?|$|,|\.)/i,
      /(?:temperatura\s+em)\s+([A-Za-zÃ€-Ã¿\s]+?)(?:\?|$|,|\.)/i,
      /(?:clima\s+em)\s+([A-Za-zÃ€-Ã¿\s]+?)(?:\?|$|,|\.)/i,

      // PadrÃµes para consultas de endereÃ§o
      /(?:endereÃ§o|endereco)\s+(?:de|do|da)\s+([A-Za-zÃ€-Ã¿\s]+?)(?:\?|$|,|\.)/i,
      /(?:rua|bairro)\s+(?:de|do|da)\s+([A-Za-zÃ€-Ã¿\s]+?)(?:\?|$|,|\.)/i,
    ];

    for (let i = 0; i < padroesCidade.length; i++) {
      const padrao = padroesCidade[i];
      const match = entrada_usuario.match(padrao);
      console.log(
        `ğŸ”§ FALLBACK: Testando padrÃ£o ${i + 1}:`,
        padrao.source,
        "Resultado:",
        match
      );
      if (match && match[1]) {
        cidadeExtraida = match[1].trim();
        console.log("ğŸ”§ FALLBACK: Cidade extraÃ­da de frase:", cidadeExtraida);
        break;
      }
    }
  }

  // 6. Se parece ser uma cidade OU se extraÃ­mos cidade de uma frase, validar usando a API
  if ((pareceCidade && !temPalavrasCEP) || cidadeExtraida) {
    const nomeCidade =
      cidadeExtraida || (apenasCidade ? apenasCidade[1].trim() : "");
    console.log(
      "ğŸ”§ FALLBACK: Cidade detectada/extraÃ­da, validando:",
      nomeCidade
    );

    // Verificar se a cidade extraÃ­da faz sentido (nÃ£o contÃ©m palavras que nÃ£o sÃ£o cidades)
    const palavrasNaoCidade = [
      "massa",
      "pizza",
      "comida",
      "receita",
      "carro",
      "moto",
      "casa",
      "trabalho",
      "escola",
      "hospital",
      "banco",
      "loja",
      "mercado",
      "restaurante",
    ];
    const palavrasCidade = nomeCidade.toLowerCase().split(/\s+/);

    const temPalavrasNaoCidade = palavrasCidade.some((palavra) =>
      palavrasNaoCidade.includes(palavra)
    );

    if (temPalavrasNaoCidade) {
      console.log(
        "ğŸ”§ FALLBACK: Cidade contÃ©m palavras que nÃ£o sÃ£o cidades:",
        nomeCidade
      );
      return {
        acao: "CONSULTA_FORA_ESCOPO" as const,
        cep_extraido: undefined,
        cidade_extraida: undefined,
        justificativa: "Consulta nÃ£o relacionada a CEP ou clima",
        mensagem_amigavel:
          "Desculpe, sÃ³ posso ajudar com consultas de CEP e previsÃ£o do tempo. Pode me perguntar sobre endereÃ§os ou clima? ğŸ˜Š",
        cidades_encontradas: undefined,
      };
    }

    try {
      // Usar a API diretamente para validar a cidade
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 segundos

      const response = await fetch(
        `https://brasilapi.com.br/api/cptec/v1/cidade/${encodeURIComponent(nomeCidade)}`,
        {
          method: "GET",
          headers: {
            Accept: "application/json",
            "User-Agent": "Deco-MCP-Server/1.0",
          },
          signal: controller.signal,
        }
      );

      clearTimeout(timeoutId);

      if (!response.ok) {
        console.log("ğŸ”§ FALLBACK: Cidade nÃ£o encontrada na API:", nomeCidade);
        return {
          acao: "CIDADE_NAO_ENCONTRADA" as const,
          cep_extraido: undefined,
          cidade_extraida: nomeCidade,
          justificativa: "Cidade nÃ£o encontrada na base de dados",
          mensagem_amigavel: `Desculpe, nÃ£o encontrei a cidade "${nomeCidade}" na base de dados. Pode verificar o nome ou tentar uma cidade prÃ³xima? ğŸ˜Š`,
          cidades_encontradas: [],
        };
      }

      const data = await response.json();
      const localidades = data.map((localidade: any) => ({
        id: localidade.id,
        nome: localidade.nome,
        estado: localidade.estado,
      }));

      if (localidades.length === 0) {
        console.log("ğŸ”§ FALLBACK: Cidade nÃ£o encontrada:", nomeCidade);
        return {
          acao: "CIDADE_NAO_ENCONTRADA" as const,
          cep_extraido: undefined,
          cidade_extraida: nomeCidade,
          justificativa: "Cidade nÃ£o encontrada na base de dados",
          mensagem_amigavel: `Desculpe, nÃ£o encontrei a cidade "${nomeCidade}" na base de dados. Pode verificar o nome ou tentar uma cidade prÃ³xima? ğŸ˜Š`,
          cidades_encontradas: [],
        };
      } else if (localidades.length === 1) {
        console.log("ğŸ”§ FALLBACK: Cidade Ãºnica encontrada:", localidades[0]);
        return {
          acao: "CONSULTAR_PREVISAO_DIRETA" as const,
          cep_extraido: undefined,
          cidade_extraida: nomeCidade,
          justificativa: "Cidade Ãºnica identificada e validada",
          mensagem_amigavel: `Vou buscar a previsÃ£o do tempo para ${nomeCidade}! ğŸ˜Š`,
          cidades_encontradas: undefined,
        };
      } else {
        console.log("ğŸ”§ FALLBACK: MÃºltiplas cidades encontradas:", localidades);
        return {
          acao: "MULTIPLAS_CIDADES" as const,
          cep_extraido: undefined,
          cidade_extraida: nomeCidade,
          justificativa: "MÃºltiplas cidades encontradas com o mesmo nome",
          mensagem_amigavel: `Encontrei vÃ¡rias cidades com o nome "${nomeCidade}". Qual vocÃª quer? ğŸ˜Š`,
          cidades_encontradas: localidades,
        };
      }
    } catch (error) {
      console.log("ğŸ”§ FALLBACK: Erro ao validar cidade:", error);
      // Se der erro na validaÃ§Ã£o, assume que Ã© uma cidade vÃ¡lida
      return {
        acao: "CONSULTAR_PREVISAO_DIRETA" as const,
        cep_extraido: undefined,
        cidade_extraida: nomeCidade,
        justificativa: "Cidade identificada na entrada (validaÃ§Ã£o falhou)",
        mensagem_amigavel: `Vou buscar a previsÃ£o do tempo para ${nomeCidade}! ğŸ˜Š`,
        cidades_encontradas: undefined,
      };
    }
  }

  // 7. Se tem palavras de clima mas nÃ£o tem cidade especÃ­fica
  if (temPalavrasClima && !pareceCidade && !cidadeExtraida) {
    console.log(
      "ğŸ”§ FALLBACK: Palavras de clima detectadas, solicitando cidade"
    );
    return {
      acao: "SOLICITAR_LOCAL" as const,
      cep_extraido: undefined,
      cidade_extraida: undefined,
      justificativa: "Consulta de clima detectada, mas cidade nÃ£o especificada",
      mensagem_amigavel: "PrevisÃ£o do tempo de qual CEP ou cidade? ğŸ˜Š",
      cidades_encontradas: undefined,
    };
  }

  // 8. Se tem palavras de CEP mas nÃ£o tem CEP especÃ­fico
  if (temPalavrasCEP && !cepMatch) {
    console.log("ğŸ”§ FALLBACK: Palavras de CEP detectadas, solicitando CEP");
    return {
      acao: "SOLICITAR_CEP" as const,
      cep_extraido: undefined,
      cidade_extraida: undefined,
      justificativa: "Consulta de endereÃ§o detectada, mas CEP nÃ£o especificado",
      mensagem_amigavel: "De qual CEP vocÃª gostaria de saber o endereÃ§o? ğŸ˜Š",
      cidades_encontradas: undefined,
    };
  }

  // 9. Se nÃ£o conseguiu identificar nada especÃ­fico
  console.log("ğŸ”§ FALLBACK: NÃ£o foi possÃ­vel identificar a intenÃ§Ã£o");
  return {
    acao: "SOLICITAR_LOCAL" as const,
    cep_extraido: undefined,
    cidade_extraida: undefined,
    justificativa: "NÃ£o foi possÃ­vel identificar a intenÃ§Ã£o da consulta",
    mensagem_amigavel:
      "Pode me dizer o que vocÃª gostaria de saber? CEP, endereÃ§o ou previsÃ£o do tempo? ğŸ˜Š",
    cidades_encontradas: undefined,
  };
};
